name: PR Docs (ALVIN MVP)

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR head (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute diff & detect changes
        id: diff
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          # Ensure we have the base commit locally
          git fetch --no-tags --prune --depth=1 origin "${BASE}:${BASE}" || true
          # List changed files
          git diff --name-only "$BASE" "$HEAD" | tee changed_files.txt
          CHANGED="$(wc -l < changed_files.txt | tr -d ' ')"
          if [ "$CHANGED" -gt 0 ]; then
            echo "files_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "files_changed=false" >> "$GITHUB_OUTPUT"
          fi
          # Always force text diff (even if Git thinks a file is binary)
          git diff -U0 --text "$BASE" "$HEAD" > code_diff.txt || true

      - name: Build prompt
        if: steps.diff.outputs.files_changed == 'true'
        run: |
          set -euo pipefail
          pr_title="${{ github.event.pull_request.title }}"
          pr_body="${{ github.event.pull_request.body }}"
          if [ -z "$pr_body" ] || [ "$pr_body" = "null" ]; then
            pr_body="(No description provided in PR)"
          fi
          {
            echo "You are a senior developer writing clear, concise PR documentation."
            echo
            echo "=== PR Title ==="
            echo "$pr_title"
            echo
            echo "=== PR Description ==="
            echo "$pr_body"
            echo
            echo "=== Code Diff (truncated) ==="
            sed 's/`/'"''"'/g' code_diff.txt
          } > prompt_final.txt

      - name: Call OpenAI
        if: steps.diff.outputs.files_changed == 'true'
        id: llm
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          sudo apt-get update >/dev/null && sudo apt-get install -y jq >/dev/null
          REQ=$(jq -n --arg content "$(<prompt_final.txt)" \
               '{model:"gpt-4o-mini",messages:[{role:"user",content:$content}],temperature:0.2}')
          RESP=$(curl -sS -w "\n%{http_code}" https://api.openai.com/v1/chat/completions \
                 -H "Authorization: Bearer ${OPENAI_API_KEY}" \
                 -H "Content-Type: application/json" \
                 -d "$REQ" || true)
          HTTP_CODE="$(echo "$RESP" | tail -n1)"
          BODY_JSON="$(echo "$RESP" | sed '$d')"
          echo "$BODY_JSON" > openai_resp.json
          DOC="$(jq -r '.choices[0].message.content // empty' openai_resp.json 2>/dev/null || true)"
          FILES="$(sed 's/^/- /' changed_files.txt || true)"
          {
            echo "### ALVIN: PR Documentation"
            echo
            echo "**Changed files:**"
            echo "$FILES"
            echo
            if [ -n "$DOC" ]; then
              echo "$DOC"
            else
              echo "_No AI-generated content returned â€” see debug artifacts._"
            fi
          } > pr_docs.md
          echo "ok=true" >> "$GITHUB_OUTPUT"

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: alvin-debug
          path: |
            changed_files.txt
            code_diff.txt
            prompt_final.txt
            openai_resp.json
            pr_docs.md
          if-no-files-found: ignore
          retention-days: 3

      - name: Comment on PR
        if: steps.llm.outputs.ok == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('pr_docs.md','utf8').trim();
            if (body) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body
              });
            } else {
              core.setFailed('Generated doc was empty.');
            }
