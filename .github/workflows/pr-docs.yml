name: ALVIN PR Docs

on:
  pull_request:
    types: [opened, reopened, synchronize, edited]

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ------------------------------
      # Gather PR metadata + diff
      # ------------------------------
      - name: Collect PR metadata & diff
        id: meta
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> "$GITHUB_OUTPUT"
          echo "PR_BODY=${{ github.event.pull_request.body }}" >> "$GITHUB_OUTPUT"
          git diff -U0 origin/main... > diff.patch

      # ------------------------------
      # Build ALVIN prompt
      # ------------------------------
      - name: Build ALVIN prompt
        run: |
          echo "The following pull request was opened. Generate developer-friendly documentation." > prompt.txt
          echo "" >> prompt.txt
          echo "Title: ${{ github.event.pull_request.title }}" >> prompt.txt
          echo "Body: ${{ github.event.pull_request.body }}" >> prompt.txt
          echo "" >> prompt.txt
          echo "Diff:" >> prompt.txt
          cat diff.patch >> prompt.txt

      # ------------------------------
      # Call OpenAI
      # ------------------------------
      - name: Call OpenAI
        id: llm
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          CONTENT=$(jq -Rs . < prompt.txt)
          RESP=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"gpt-4o-mini\",
              \"messages\": [{\"role\": \"user\", \"content\": $CONTENT}],
              \"temperature\": 0.3
            }")
          TEXT=$(echo "$RESP" | jq -r '.choices[0].message.content')
          if [ -z "$TEXT" ] || [ "$TEXT" = "null" ]; then
            TEXT="(No content generated)"
          fi
          printf "%s\n" "$TEXT" > llm.md

      # ------------------------------
      # Ensure Jekyll config (so .md renders on Pages)
      # ------------------------------
      - name: Ensure Jekyll config
        shell: bash
        run: |
          if [ ! -f "_config.yml" ]; then
            printf "title: ALVIN â€“ PR Docs\n" > _config.yml
            printf "theme: jekyll-theme-cayman\n" >> _config.yml
            printf "markdown: kramdown\n" >> _config.yml
          fi

      # ------------------------------
      # Write PR doc (with Jekyll front matter)
      # ------------------------------
      - name: Write PR doc (with Jekyll front matter)
        id: write
        run: |
          DOCS_DIR="docs/releases/unreleased"
          mkdir -p "$DOCS_DIR"
          FILE="$DOCS_DIR/ALVIN_PR_${{ steps.meta.outputs.PR_NUMBER }}.md"
          echo "---" > "$FILE"
          echo "title: PR #${{ steps.meta.outputs.PR_NUMBER }} â€“ ${{ github.event.pull_request.title }}" >> "$FILE"
          echo "pr_number: ${{ steps.meta.outputs.PR_NUMBER }}" >> "$FILE"
          echo "---" >> "$FILE"
          echo "" >> "$FILE"
          cat llm.md >> "$FILE"
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      # ------------------------------
      # Ensure/Update PR Docs Index
      # ------------------------------
      - name: Ensure/Update PR Docs Index
        run: |
          INDEX="docs/index.md"
          if [ ! -f "$INDEX" ]; then
            echo "# ALVIN â€“ PR Documentation" > "$INDEX"
            echo "" >> "$INDEX"
            echo "Welcome! This site collects PR documentation automatically generated by ALVIN." >> "$INDEX"
            echo "" >> "$INDEX"
            echo "## PR Docs Index" >> "$INDEX"
          fi
          echo "- [PR #${{ steps.meta.outputs.PR_NUMBER }}](./$(basename ${{ steps.write.outputs.file }}))" >> "$INDEX"

      # ------------------------------
      # Commit & push docs
      # ------------------------------
      - name: Commit & push docs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/ _config.yml
          git commit -m "Add ALVIN docs for PR #${{ steps.meta.outputs.PR_NUMBER }}" || echo "No changes to commit"
          git push

      # ------------------------------
      # Comment on PR with Pages link
      # ------------------------------
      - name: Comment on PR with Pages link
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.meta.outputs.PR_NUMBER }};
            const pagesUrl = `https://alvinmayers-design.github.io/docbot-poc/`;
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ“„ ALVIN generated docs for this PR are published at: ${pagesUrl}`
            })
