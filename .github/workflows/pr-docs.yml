name: ALVIN PR Docs

on:
  pull_request:
    types: [opened, reopened, synchronize, edited]

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------
      # Gather PR metadata + diff
      # -----------------------------
      - name: Collect PR metadata & diff
        id: meta
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"

          {
            echo "PR_TITLE<<EOF"
            echo "${{ github.event.pull_request.title }}"
            echo "EOF"
            echo "PR_BODY<<EOF"
            echo "${{ github.event.pull_request.body }}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          git diff ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} > diff.txt

      # -----------------------------
      # Build the LLM prompt
      # -----------------------------
      - name: Build ALVIN prompt
        run: |
          cat > prompt.txt <<'EOF'
          You are ALVIN. Given the PR title, description, and diff, write concise human-readable release notes.

          Sections to include (markdown):
          - **Title**
          - **Description**
          - **Code Changes** (bullets)
          - **Impact**
          - **Risks & Rollback**
          - **Testing**

          Keep it short and useful. Avoid huge code blocks.

          ----
          PR Title:
          ${{ steps.meta.outputs.PR_TITLE }}

          PR Body:
          ${{ steps.meta.outputs.PR_BODY }}

          DIFF:
          EOF
          cat diff.txt >> prompt.txt

      # -----------------------------
      # Call OpenAI (expects secret OPENAI_API_KEY)
      # -----------------------------
      - name: Call OpenAI
        id: llm
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          CONTENT=$(jq -Rs . < prompt.txt)
          RESP=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"model\":\"gpt-4o-mini\",\"messages\":[{\"role\":\"user\",\"content\":$CONTENT}],\"temperature\":0.3}")

          TEXT=$(echo "$RESP" | jq -r '.choices[0].message.content')
          if [ -z "$TEXT" ] || [ "$TEXT" = "null" ]; then
            TEXT="(No content generated)"
          fi
          printf "%s\n" "$TEXT" > llm.md

      # -----------------------------
      # Ensure Jekyll config (so .md renders on Pages)
      # -----------------------------
            - name: Ensure Jekyll config
        shell: bash
        run: |
          if [ ! -f "_config.yml" ]; then
            printf "title: ALVIN â€“ PR Docs\n" > _config.yml
            printf "theme: jekyll-theme-cayman\n" >> _config.yml
            printf "markdown: kramdown\n" >> _config.yml
          fi

      # -----------------------------
      # Write PR doc to docs/releases/unreleased with front matter
      # -----------------------------
      - name: Write PR doc (with Jekyll front matter)
        id: write
        run: |
          DOCS_DIR="docs/releases/unreleased"
          mkdir -p "$DOCS_DIR"
          FILE="$DOCS_DIR/pr-${{ steps.meta.outputs.PR_NUMBER }}.md"

          {
            echo '---'
            echo "title: PR #${{ steps.meta.outputs.PR_NUMBER }} â€“ ${{ steps.meta.outputs.PR_TITLE }}"
            echo 'layout: default'
            echo '---'
            echo
            echo "# PR #${{ steps.meta.outputs.PR_NUMBER }}: ${{ steps.meta.outputs.PR_TITLE }}"
            echo
            echo "_Author:_ @${{ github.actor }}  \n_Branches:_ ${{ github.event.pull_request.head.ref }} â†’ ${{ github.event.pull_request.base.ref }}"
            echo
            cat llm.md
            echo
            echo "**Traceability:** Linked PR #${{ steps.meta.outputs.PR_NUMBER }}"
          } > "$FILE"

          echo "FILE_PATH=$FILE" >> "$GITHUB_OUTPUT"

      # -----------------------------
      # Ensure docs/index.md exists; add front matter; add link
      # -----------------------------
      - name: Ensure/Update PR Docs Index
        run: |
          INDEX="docs/index.md"
          mkdir -p docs

          # Create index with front matter if missing
          if [ ! -f "$INDEX" ]; then
            cat > "$INDEX" <<'EOM'
            ---
            title: ALVIN â€“ PR Documentation
            layout: default
            ---

            # ALVIN â€“ PR Documentation

            Welcome! This site collects PR documentation automatically generated by ALVIN.

            ## PR Docs Index
            EOM
            sed -i 's/^[[:space:]]*//' "$INDEX"
          else
            # Ensure front matter exists
            if ! head -n1 "$INDEX" | grep -q '^---$'; then
              TMP="$INDEX.tmp"
              {
                echo '---'
                echo 'title: ALVIN â€“ PR Documentation'
                echo 'layout: default'
                echo '---'
                echo
                cat "$INDEX"
              } > "$TMP" && mv "$TMP" "$INDEX"
            fi
          fi

          LINK="- [PR #${{ steps.meta.outputs.PR_NUMBER }}](./releases/unreleased/pr-${{ steps.meta.outputs.PR_NUMBER }}.md)"

          # Insert link below "## PR Docs Index" if not already present
          if ! grep -q "pr-${{ steps.meta.outputs.PR_NUMBER }}.md" "$INDEX"; then
            awk -v link="$LINK" '
              BEGIN{added=0}
              {print}
              /^##[[:space:]]+PR Docs Index/ && !added {print link; added=1}
            ' "$INDEX" > "$INDEX.tmp" && mv "$INDEX.tmp" "$INDEX"
          fi

      # -----------------------------
      # Commit & push the docs
      # -----------------------------
      - name: Commit & push docs
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs _config.yml || true
          git commit -m "docs: publish PR #${{ steps.meta.outputs.PR_NUMBER }} notes" || echo "Nothing to commit"
          git push

      # -----------------------------
      # Comment on PR with the public Pages link
      # -----------------------------
      - name: Comment on PR with Pages link
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const url = `https://${owner}.github.io/${repo}/releases/unreleased/pr-${pr}.md`;
            await github.rest.issues.createComment({
              owner, repo, issue_number: pr,
              body: `ðŸ“„ PR docs published: ${url}`
            });
