name: PR Docs (ALVIN MVP)

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR head (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute diff & detect changes
        id: diff
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          git fetch --no-tags --prune --depth=1 origin "${BASE}:${BASE}" || true

          git diff --name-only "$BASE" "$HEAD" | tee changed_files.txt
          CHANGED=$(wc -l < changed_files.txt | tr -d ' ')
          if [ "$CHANGED" -gt 0 ]; then
            echo "files_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "files_changed=false" >> "$GITHUB_OUTPUT"
          fi

          git diff "$BASE" "$HEAD" > full_diff.txt
          head -c 120000 full_diff.txt > code_diff.txt  # ~120KB cap

      - name: Prepare prompt
        id: prompt
        if: steps.diff.outputs.files_changed == 'true'
        run: |
          set -euo pipefail
          pr_title="${{ github.event.pull_request.title }}"
          pr_body="${{ github.event.pull_request.body || 'No description provided.' }}"

          printf "%s\n" "You are a senior developer writing clear, concise PR documentation." > prompt_final.txt
          printf "\n=== PR Title ===\n%s\n" "$pr_title" >> prompt_final.txt
          printf "\n=== PR Description ===\n%s\n" "$pr_body" >> prompt_final.txt
          printf "\n=== Code Diff (truncated) ===\n" >> prompt_final.txt
          # Avoid backticks breaking JSON
          sed 's/`/'"''"'/g' code_diff.txt >> prompt_final.txt

      - name: Call OpenAI (no server needed)
        id: llm
        if: steps.diff.outputs.files_changed == 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y jq

          BODY=$(jq -n --arg model "gpt-4o-mini" --arg content "$(<prompt_final.txt)" \
            '{model:$model, messages:[{role:"user", content:$content}], temperature:0.2}')

          RESP=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer '"$OPENAI_API_KEY"'" \
            -H "Content-Type: application/json" \
            -d "$BODY")

          DOC=$(echo "$RESP" | jq -r '.choices[0].message.content // ""')
          echo "$DOC" > pr_docs.md
          if [ -s pr_docs.md ]; then echo "ok=true" >> "$GITHUB_OUTPUT"; else echo "ok=false" >> "$GITHUB_OUTPUT"; fi

      - name: Comment on PR
        if: steps.llm.outputs.ok == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('pr_docs.md','utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
