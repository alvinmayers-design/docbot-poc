name: PR Docs (ALVIN MVP)

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR head (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute diff & detect changes
        id: diff
        run: |
          set -euo pipefail

          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"

          # Ensure we have the base commit locally
          git fetch --no-tags --prune --depth=1 origin "${BASE}:${BASE}" || true

          # List changed files
          git diff --name-only "$BASE" "$HEAD" > changed_files.txt

          CHANGED="$(wc -l < changed_files.txt | tr -d ' ')"
          if [ "$CHANGED" -gt 0 ]; then
            echo "files_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "files_changed=false" >> "$GITHUB_OUTPUT"
          fi

          # Always produce a text diff even if Git thinks files are binary
          git diff --unified=0 --ignore-cr-at-eol --text "$BASE" "$HEAD" > full_diff.txt || true
          head -c 120000 full_diff.txt > code_diff.txt || true

      - name: Prepare prompt
        id: prompt
        if: steps.diff.outputs.files_changed == 'true'
        run: |
          set -euo pipefail

          pr_title="${{ github.event.pull_request.title }}"
          pr_body="${{ github.event.pull_request.body }}"

          # Fallback for empty/null PR descriptions
          if [ -z "$pr_body" ] || [ "$pr_body" = "null" ]; then
            pr_body="(No description provided in PR)"
          fi

          printf "%s\n" "You are a senior developer writing clear, concise PR documentation." > prompt_final.txt
          printf "\n=== PR Title ===\n%s\n" "$pr_title" >> prompt_final.txt
          printf "\n=== PR Description ===\n%s\n" "$pr_body" >> prompt_final.txt
          printf "\n=== Code Diff (truncated) ===\n" >> prompt_final.txt

          # Avoid backticks breaking JSON when we POST
          sed 's/`/'"''"'/g' code_diff.txt >> prompt_final.txt

      - name: Call OpenAI (with debug + fallbacks)
        id: llm
        if: steps.diff.outputs.files_changed == 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          sudo apt-get update >/dev/null && sudo apt-get install -y jq >/dev/null

          MODEL="gpt-4o-mini"   # change here if your account needs a different model

          # Build request JSON safely with jq
          REQ=$(jq -n --arg model "$MODEL" --arg content "$(<prompt_final.txt)" \
            '{model:$model, messages:[{role:"user", content:$content}], temperature:0.2}')

          echo "::group::Prompt preview (first 40 lines)"
          head -n 40 prompt_final.txt || true
          echo "::endgroup::"

          # Call API; capture status even for non-2xx responses
          RESP=$(curl -sS -w "\n%{http_code}" https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "$REQ" || true)

          HTTP_CODE="$(echo "$RESP" | tail -n1)"
          BODY_JSON="$(echo "$RESP" | sed '$d')"
          echo "$BODY_JSON" > openai_resp.json
          echo "HTTP_CODE=$HTTP_CODE"

          FILES="$(sed 's/^/- /' changed_files.txt || true)"

          if [ "${HTTP_CODE}" -lt 200 ] || [ "${HTTP_CODE}" -ge 300 ]; then
            ERR_MSG="$(jq -r '.error.message // "Unknown error from OpenAI"' openai_resp.json 2>/dev/null || echo "Unknown error")"
            {
              echo "### ALVIN: LLM call failed"
              echo
              echo "**HTTP**: ${HTTP_CODE}"
              echo
              echo "> ${ERR_MSG}"
              echo
              echo "**Changed files:**"
              echo "${FILES}"
            } > pr_docs.md
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            DOC="$(jq -r '.choices[0].message.content // empty' openai_resp.json)"
            {
              echo "### ALVIN: PR Documentation"
              echo
              echo "**Changed files:**"
              echo "${FILES}"
              echo
              if [ -n "$DOC" ]; then
                echo "$DOC"
              else
                echo "_No AI-generated content returned â€” see debug artifacts._"
              fi
            } > pr_docs.md
            echo "ok=true" >> "$GITHUB_OUTPUT"
          fi

          echo "::group::Doc preview (first 20 lines)"
          head -n 20 pr_docs.md || true
          echo "::endgroup::"

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: alvin-debug
          path: |
            changed_files.txt
            full_diff.txt
            code_diff.txt
            prompt_final.txt
            openai_resp.json
            pr_docs.md
          if-no-files-found: ignore
          retention-days: 3

      - name: Comment on PR (non-empty only)
        if: steps.llm.outputs.ok == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('pr_docs.md','utf8').trim();
            if (!body) {
              core.setFailed("Refusing to post empty comment.");
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body
              });
            }
