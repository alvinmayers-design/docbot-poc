name: ALVIN PR Docs

on:
  pull_request:
    types: [opened, reopened, synchronize, edited]

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
      # --------------------------------
      # Check out the PR source branch
      # --------------------------------
      - name: Checkout (PR branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      # --------------------------------
      # Gather PR metadata & diff
      # --------------------------------
      - name: Collect PR metadata & diff
        id: meta
        shell: bash
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
          echo "PR_TITLE=${{ github.event.pull_request.title }}"   >> "$GITHUB_OUTPUT"
          echo "PR_BODY=${{ github.event.pull_request.body }}"     >> "$GITHUB_OUTPUT"

          # Create a compact diff of PR branch vs main (adjust base if needed)
          git fetch origin main --depth=1
          git diff -U0 origin/main...HEAD > diff.patch || true

      # --------------------------------
      # Build the LLM prompt
      # --------------------------------
      - name: Build ALVIN prompt
        shell: bash
        run: |
          {
            echo "The following pull request was opened. Generate developer-friendly documentation."
            echo
            echo "Title: ${{ steps.meta.outputs.PR_TITLE }}"
            echo "Body:  ${{ steps.meta.outputs.PR_BODY }}"
            echo
            echo "Diff:"
            echo '```diff'
            cat diff.patch
            echo '```'
          } > prompt.txt

      # --------------------------------
      # Call OpenAI (Chat Completions)
      # --------------------------------
      - name: Call OpenAI
        id: llm
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          set -e
          CONTENT="$(jq -Rs . < prompt.txt)"
          RESP=$(
            curl -s https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: application/json" \
              -d "$(jq -n \
                    --arg content "$CONTENT" \
                    '{model:"gpt-4o-mini",messages:[{role:"user",content:$content}],temperature:0.3}')"
          )
          TEXT="$(echo "$RESP" | jq -r '.choices[0].message.content // empty')"
          if [ -z "$TEXT" ]; then
            TEXT="(No content generated)"
          fi
          printf "%s\n" "$TEXT" > llm.md

      # --------------------------------
      # Ensure Jekyll config exists (so Pages renders .md)
      # --------------------------------
      - name: Ensure Jekyll config
        shell: bash
        run: |
          if [ ! -f "_config.yml" ]; then
            printf "title: ALVIN – PR Docs\n"           >  _config.yml
            printf "theme: jekyll-theme-cayman\n"      >> _config.yml
            printf "markdown: kramdown\n"              >> _config.yml
          fi

      # --------------------------------
      # Write PR doc into docs/releases/unreleased with Jekyll front matter
      # --------------------------------
      - name: Write PR doc (with Jekyll front matter)
        id: write
        shell: bash
        run: |
          set -e
          PR="${{ steps.meta.outputs.PR_NUMBER }}"
          TITLE="${{ steps.meta.outputs.PR_TITLE }}"
          DOCS_DIR="docs/releases/unreleased"
          mkdir -p "$DOCS_DIR"

          FILE="$DOCS_DIR/pr-$PR.md"

          {
            echo "---"
            echo "title: \"PR #$PR — ${TITLE//\"/\\\"}\""
            echo "layout: default"
            echo "---"
            echo
            echo "# Why"
            echo
            sed -n '1,200p' llm.md
            echo
            echo "# What changed"
            echo
            echo "See diff included in the PR."
            echo
            echo "# Impact"
            echo
            echo "TBD."
            echo
            echo "# Risks & Rollback"
            echo
            echo "TBD."
          } > "$FILE"

          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      # --------------------------------
      # Ensure/Update docs/index.md with a link to the new file
      # --------------------------------
      - name: Ensure/Update PR Docs Index
        id: index
        shell: bash
        run: |
          set -e
          INDEX="docs/index.md"
          if [ ! -f "$INDEX" ]; then
            mkdir -p docs
            {
              echo "# ALVIN – PR Documentation"
              echo
              echo "Welcome! This site collects PR documentation automatically generated by ALVIN."
              echo
              echo "## PR Docs Index"
            } > "$INDEX"
          fi
          BASENAME="$(basename "${{ steps.write.outputs.file }}")"
          # Avoid duplicate entries
          if ! grep -q "($BASENAME)" "$INDEX"; then
            echo "- [PR #${{ steps.meta.outputs.PR_NUMBER }}](./$BASENAME)" >> "$INDEX"
          fi

      # --------------------------------
      # Make sure we're on the PR source branch (NOT detached)
      # --------------------------------
      - name: Ensure we are on the PR source branch (not detached)
        shell: bash
        run: |
          BR="${{ github.head_ref }}"
          echo "Switching to branch: $BR"
          git fetch origin "$BR" --depth=1
          git switch -C "$BR"

      # --------------------------------
      # Commit & push docs to the PR branch
      # --------------------------------
      - name: Commit & push docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add docs/index.md docs/releases/unreleased/*.md 2>/dev/null || true

          if git diff --cached --quiet; then
            echo "No doc changes to commit."
            exit 0
          fi

          git commit -m "Add ALVIN docs for PR #${{ steps.meta.outputs.PR_NUMBER }}"
          git push origin "${{ github.head_ref }}"

      # --------------------------------
      # Comment on the PR with a Pages link
      # --------------------------------
      - name: Comment on PR with Pages link
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.meta.outputs.PR_NUMBER }};
            const pagesUrl = 'https://alvinmayers-design.github.io/docbot-poc/';
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ ALVIN generated docs for this PR are published at: ${pagesUrl}`
            });
