name: Generate PR Documentation

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR head (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute diff & detect changes
        id: diff
        run: |
          set -e
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          git fetch origin "${BASE_SHA}:${BASE_SHA}" || true
          git diff --name-only "$BASE_SHA" "$HEAD_SHA" | tee changed_files.txt
          CHANGES=$(wc -l < changed_files.txt | tr -d ' ')
          echo "files_changed=$([ "$CHANGES" -gt 0 ] && echo true || echo false)" >> "$GITHUB_OUTPUT"
          git diff "$BASE_SHA" "$HEAD_SHA" > full_diff.txt
          head -c 120000 full_diff.txt > code_diff.txt  # cap ~120KB

      - name: Prepare prompt
        id: prompt
        if: steps.diff.outputs.files_changed == 'true'
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_BODY="${PR_BODY:-No description provided.}"
          CODE_DIFF="$(cat code_diff.txt)"

          cat > prompt.txt << 'EOF'
You are a senior developer writing clear, concise PR documentation.

=== PR Title ===
{{PR_TITLE}}

=== PR Description ===
{{PR_BODY}}

=== Code Diff (truncated) ===
{{CODE_DIFF}}

Produce GitHub-flavored Markdown with:
1) What changed
2) Why it changed (business/technical rationale)
3) Risks/impacts (perf, security, ops)
4) Rollback steps
5) Validation checklist
EOF

          sed -i "s|{{PR_TITLE}}|${PR_TITLE}|g" prompt.txt
          sed -i "s|{{PR_BODY}}|${PR_BODY}|g" prompt.txt
          SANITIZED_DIFF="${CODE_DIFF//\`/''}"
          awk -v repl="$SANITIZED_DIFF" '{gsub("{{CODE_DIFF}}", repl)}1' prompt.txt > prompt_final.txt

      - name: Call OpenAI (no server needed)
        id: llm
        if: steps.diff.outputs.files_changed == 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e
          BODY=$(jq -n \
            --arg model "gpt-4o-mini" \
            --arg content "$(cat prompt_final.txt)" \
            '{model:$model,messages:[{role:"user",content:$content}],temperature:0.2}')
          RESP=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$BODY")
          DOC=$(echo "$RESP" | jq -r '.choices[0].message.content // ""')
          echo "$DOC" > pr_docs.md
          echo "doc_ready=$([ -s pr_docs.md ] && echo true || echo false)" >> "$GITHUB_OUTPUT"

      - name: Comment on PR
        if: steps.llm.outputs.doc_ready == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('pr_docs.md','utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

      # Optional: also commit the doc to /docs for GitHub Pages
      - name: Commit docs file (optional)
        if: steps.llm.outputs.doc_ready == 'true' && false == 'true'  # flip to true later
        run: |
          PR_NUM="${{ github.event.pull_request.number }}"
          mkdir -p docs
          cp pr_docs.md "docs/pr-${PR_NUM}.md"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "docs/pr-${PR_NUM}.md"
          git commit -m "Docs: PR #${PR_NUM}"
          git push