name: ALVIN PR Docs

"on":
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  generate-and-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Collect PR metadata and changed files
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner: context.repo.owner, repo: context.repo.repo, pull_number: pr.number, per_page: 100 }
            );
            core.setOutput('number', pr.number.toString());
            core.setOutput('title', pr.title || '');
            core.setOutput('files', JSON.stringify(files.map(f => ({
              filename: f.filename,
              status: f.status,
              patch: f.patch || ''
            }))));

      - name: Generate doc preview with OpenAI (POC)
        id: preview
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          FILES: ${{ steps.pr.outputs.files }}
          TITLE: ${{ steps.pr.outputs.title }}
        run: |
          node -e "
          const files = JSON.parse(process.env.FILES || '[]');
          const title = process.env.TITLE || '';
          const sys = 'You are ALVIN, an assistant that writes concise PR documentation (What changed, Why, How to validate, Risk/rollback). Use markdown and short sections.';
          const user = 'PR Title: ' + title + '\\n\\nChanged files (name, status, patch excerpt):\\n' +
            files.map(f => '- ' + f.filename + ' (' + f.status + ')\\n' + (f.patch || '').slice(0, 4000)).join('\\n\\n');

          async function main(){
            const r = await fetch('https://api.openai.com/v1/chat/completions', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + process.env.OPENAI_API_KEY },
              body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [{ role: 'system', content: sys }, { role: 'user', content: user }],
                temperature: 0.2,
                max_tokens: 900
              })
            });
            if (!r.ok) {
              console.error('OpenAI API error status:', r.status);
              const text = await r.text();
              console.error(text);
              process.exit(1);
            }
            const j = await r.json();
            const text = (j.choices?.[0]?.message?.content || 'No output').trim();
            require('fs').writeFileSync('ALVIN_PR_PREVIEW.md', text);
            const esc = (s) => s.replace(/%/g, '%25').replace(/\\r/g, '%0D').replace(/\\n/g, '%0A');
            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `preview=${esc(text)}\\n`);
          }
          main().catch(e => { console.error(e); process.exit(1); });
          "

      - name: Move preview into docs directory
        run: |
          mkdir -p docs
          cp ALVIN_PR_PREVIEW.md "docs/ALVIN_PR_${{ steps.pr.outputs.number }}.md"

      - name: Commit doc to PR branch
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: docs/ALVIN_PR_${{ steps.pr.outputs.number }}.md
          commit_message: "chore(docs): add ALVIN PR ${{ steps.pr.outputs.number }} documentation"

      - name: Comment on PR with preview
        uses: actions/github-script@v7
        with:
          script: |
            const number = Number(${{ steps.pr.outputs.number }});
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const preview = ${{ toJSON(steps.preview.outputs.preview) }};
            const body = [
              'ðŸ§ª **ALVIN â€“ Autogenerated PR Docs**',
              '',
              '> POC summary. Human review required.',
              '',
              '<details><summary>Preview</summary>',
              '',
              preview,
              '',
              '</details>',
              '',
              `ðŸ“„ Full doc committed under \\`docs/ALVIN_PR_${number}.md\\`.`
            ].join('\\n');
            await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
